---
title: "Synthetic Population with simPop"
toc: true
bibliography: references.bib
---

## Why synthetic population?

Purpose

-   Data privacy

-   Scale up a survey data to better fit the distribution of population

Application

-   input data for machine learning (which requires a lot of data)

-   use as population for micro-simulation problems

## Data for creating synthetic population

Micro-level data (i.e. data at an individual level)

-   **Source**: from household surveys

-   Detailed data

Macro-level data (i.e. contingency/frequency tables for describing distribution across attributes)

-   **Source**: census tables, usually open-source for public use from national statistical institutes
-   More representative of the whole population

## Methodology

### Synthetic Reconstruction (SR)

Idea: assigning partial weights to synthetic micro data to match the distribution seen from macro data (marginal proportion). So essentially trying to figure out the underlying joint distribution.

Required input data:

-   micro-dataset representative of the population of interest

-   aggregated data for multiple data (multiple marginal distributions)

Algorithm:

-   Iterative proportional fitting (IPF)

-   Model for predicting the weight

### Combinatorial Optimization (CO)

Idea: assigning integer weights to available micro data to match the distribution seen from macro data

Required input data:

Algorithm:

-   Generative algo (less susceptible to local maxima)

-   Modified simulated annealing

### Overall process

![](figs/synthetic_population_process.png)

## Code using simPop

Paper for simPop [@Templ2017]

Mostly follows SR and model methods

```{r, warnings=TRUE, message=TRUE, output=TRUE}
library(simPop)
library(tidyverse)
```

### Input data

Use survey data (micro data) as input

```{r}
# use built-in survey data for demonstration purpose
data("eusilcS")

# rename some important variables for readability
eusilcS <- eusilcS %>% rename(hhid = db030, state = db040, gender = rb090, economic_status = pl030, weight = rb050, citizenship = pb220a)

head(eusilcS) 
```

Create `dataObj` using `specifyInput`

```{r}
inputData <- specifyInput(
  eusilcS,
  hhid = "hhid", # specify variable for household id
  hhsize = "hsize", # specify household size
  strata = "state", # variable on stata (regions, etc.)
  weight = "weight" # variable for sample weight (note that the sample weight is reduced by a factor of 100)
  )

inputData
```

### Calibrating sample weight

Calibrating sample weight by population totals (if the total population aka. macro data is available).

Calibrated weights are computed by generalized raking procedures.

```{r}
data("totalsRG")
totalsRG %>% 
  arrange(db040, rb090)
```

Compared to input data

```{r}
eusilcS %>% 
  group_by(gender, state) %>% 
  summarize(
    freq = n()
  ) %>% arrange(state, gender)
```

Since the `weight` is reduced by a factor of 100, total population must also be scaled down by 100 before calibrating

```{r}
totalsRG <- totalsRG %>% 
  mutate(Freq = Freq/100) %>% 
  rename( # rename to match colnames in inputData
    gender = rb090, state = db040
  )

# then calibrate the input data
calibratedWeights <- calibSample(inputData, totalsRG)

# calibrated weights can then be added to input data
addWeights(inputData) <- calibratedWeights
```

### Generate synthetic population data

#### Generate household structure

Built by resampling households from micro data (basically using CO with constraints being basic variables from macro data)

***Why*****?** Prevent creation of unrealistic household

Sampling technique: *Alias sampling*

```{r}
syntheticPopulation <- simStructure(
  data = inputData, 
  method = "direct",
  basicHHvars = c("age", "gender", "state")
  )

syntheticPopulation
```

#### Generate categorical variables

***Approaches***

-   model-based simulation

    -   multinomial logistic regression `method = "multinom"`

    -   decision tree (classification trees or random forest) `method = "ctree"` or `method = "cforest"`

-   synthetic reconstruction `method = "distribution"` (when macro data is available)

***Code***

```{r}
syntheticPopulation <- simCategorical(
  syntheticPopulation,
  method = "multinom", # specify approach
  # to find number of cores available, call parallel::detectCores()
  nr_cpus = 8, # specify number of cpus for parallel computing
  additional = c("economic_status", "citizenship")
  )

syntheticPopulation
```

***Demonstrating concept of synthetic reconstruction***

```{r, collapse=TRUE}
# TODO: demonstrating concept of synthetic reconstruction
# synRec <- simCategorical()
```

#### Generate continuous variables

***Approaches***

-   Multinomial logistic regression + Random drawing `method = "multinom"`: follow these steps

    -   Categorize the continuous variable

    -   Use regression model to get a category

    -   Value from the largest category is drawn from a generalized Pareto distribution

-   Logistic regression + Linear regression `method = "lm"` (necessary for semi-continuous distribution): follow these steps

    -   Apply logistic regression model

    -   Perform linear regression

```{r}
syntheticPopulation <- simContinuous(
  syntheticPopulation,
  additional = c("netIncome"), # specify continuous variable to simulate
  upper = 200000, # set upper limit
  zeros = TRUE, # specify whether simulated vars are semi-continuous (contains many 0 values)
  imputeMissing = FALSE # whether to impute missing values using hock-deck
)

syntheticPopulation
```

```{r}
# view categories 
unique(pop(syntheticPopulation, var=c("netIncomeCat")))
```

Can also manually adjust values of the variables by accessing through `pop()`. The returned data is a `data.table`

***Example:*** set net income for individuals at age \<16 to `NA`

```{r}
# enforce constraints
incomeConstraints <- pop(syntheticPopulation, var = c("age", "netIncome"))
incomeConstraints$age <- as.numeric(incomeConstraints$age)
incomeConstraints[age < 16, netIncome := NA]

# override values for netIncome variable in synthetic population
pop(syntheticPopulation, var = c("netIncome")) <- incomeConstraints$netIncome

```

#### Simulation of components

Some variables in surveys are not collected directly but derived from other related variables. (e.g. net income computed from multiple income sources)

Those related variables (referred to as components variables) can be generated by breaking down the synthetically generated continuous variable. This is done by re-sampling fractions from available survey data.

`simPop` have functionÂ `simComponents()` to accomplish that.

```{r}
# --- Categorize netIncome for use as a conditioning variable ------ 
sIncome <- manageSimPopObj(syntheticPopulation, var = "netIncome", sample=TRUE)
# NOTE: it is equivalent to samp(syntheticPopulation, var = "netIncome") but samp() allows get-set multiple variables
# using manageSimPopObj as getter/setter is usually safer 
sWeight <- manageSimPopObj(syntheticPopulation, var = "weight", sample=TRUE)
pIncome <- manageSimPopObj(syntheticPopulation, var = "netIncome") # netIncome for synthetic population

# create breaks for categorizing
breaks <- getBreaks(
  x = sIncome, # specify semi continuous variables
  w = sWeight, # specify sample weight
  upper = Inf, # upper bound of the variable, set as Inf to make sure both sample and pop values are in bound
  equidist = FALSE # specify whether break points should be equal distance
)

# update categories for both population and and sample
syntheticPopulation <- manageSimPopObj(
  syntheticPopulation, 
  set=TRUE, # specifying usinng setter
  var = "netIncomeCat",
  sample = TRUE, # update sample first
  values = getCat(x = sIncome, breaks)# update categories with generated break points
  )
syntheticPopulation <- manageSimPopObj(
  syntheticPopulation, set=TRUE, var = "netIncomeCat",
  sample = FALSE, # update population here 
  values = getCat(x = pIncome, breaks)
  )

# ----- Simulate  net income components ------ 
syntheticPopulation <- simComponents(
  simPopObj = syntheticPopulation, 
  total = "netIncome", # specify the variable for total
  # specify the component variables
  components = c("py010n", "py050n", "py090n", "py100n", "py110n",   "py120n", "py130n", "py140n"), 
  # specify conditions for computing fractions of each component
  conditional = c("netIncomeCat", "economic_status"), 
  replaceEmpty = "sequential", 
  seed = 1)

syntheticPopulation
```

#### Geographic allocation of population

Synthetic population can be assigned to smaller geographical unit if data for population at lower geographical unit is available. In `simPop` this is done using `simInitSpatial()`

Required inputs: one or 2 table(s) with 3 variables

-   Boarder geographical area (area in input sample data)

-   Smaller area (area to assign the synthetic population to)

-   Population for smaller area (either for household or individual)

::: {.callout-note collapse="true"}
### Simulate census data with smaller geographical unit

```{r}
# Function for simulating data for smaller geographical unit for demonstration purpose
simulate_districts <- function(inp){
  hhid <- "hhid"
  region <- "state"
  a <- inp[!duplicated(inp[, hhid]), c(hhid, region)]
  
  spl <- split(a, a[,region]) # get sample hhid-region pairs grouped by regions
  regions <- unique(inp[, region]) # get regions in input sample data
  
  # assign each household to a smaller area
  tmpres <- lapply(1:length(spl), function(x){
    # simulate code for smaller area 
    codes <- paste(x, 1:sample(10:90, 1), sep="")
    spl[[x]]$district <- sample(codes, nrow(spl[[x]]), replace = TRUE)
    spl[[x]]
  })
  
  tmpres <- do.call("rbind", tmpres)
  tmpres <- tmpres[, -2]
  out <- merge(inp, tmpres, by.x = hhid, by.y = hhid, all.x = TRUE)
  invisible(out)
}

# create census data with district 
census <- simulate_districts(eusilcS)
```
:::

Create input data for assigning synthetic population to smaller geographical unit

```{r}
# create the contingency table for household per region
tabHH <- as.data.frame(
  xtabs(weight ~ state + district, data = census[!duplicated(census$hhid), ])
  )

# create the contingency table for population per region
tabP <- as.data.frame(
  xtabs(weight ~ state + district, data = census)
)
```

***Code for geographical allocation***

```{r}
syntheticPopulation <- simInitSpatial(
  syntheticPopulation, 
  # either tspatialHH or tspatialP is required. Assigning values for both also works.
  tspatialHH = tabHH, # specify contingency table for household
  tspatialP = tabP, # specify contingency table for individual
  additional = "district", # specify variable for smaller area (must exist in tspatial table)
  region = "state" # specify variable for larger area (must exist in tspatial table)
)

syntheticPopulation
```

### Calibrate the synthetic population

***Approach***

Calibrate against a known distribution of the population using Combinatorial Optimization

***Code for calibrating***

obtain a "known distribution" from synthetic data for demonstration purpose

```{r}
# create another synthetic data to obtain "known distribution"
census <- simStructure(data = inputData, method = "direct", basicHHvars = c("age", "gender", "state"))
census <- simCategorical(census, additional = c("economic_status", "citizenship"))

# create known distribution
census <- data.frame(pop(census))
knownDistribution <- as.data.frame(
  xtabs(~ state + gender + economic_status, data=census)
)
```

```{r}
# add known distribution to synthetic population
syntheticPopulation <- addKnownMargins(syntheticPopulation, knownDistribution)

# and calibrate using simulated annealing
adjustedPopulation <- calibPop(
  syntheticPopulation, 
  split = "state", # split by region
  temp = 1, # starting temperature for simulated annealing
  epsP.factor = 0.00005, # adjust factor of acceptance error on individual level
  maxiter = 200, temp.cooldown = 0.85, factor.cooldown = 0.85,
  min.temp = 0.001, nr_cpus = 8
) 
```

### Validate synthetic population with built-in tools

***Computational tools***

`spTable()` computes contingency table for survey data and simulated data

***Visualization tools***

`spMosaic()` for mosaic plot

`spCdfplot()` for cumulative distribution plot

`spBwplot()` for boxplot

```{r, warnings=FALSE}
# plot cdf for netIncome conditioning on state
spCdfplot(syntheticPopulation, x = "netIncome", cond = "state")

# check age-gender distribution
spCdfplot(syntheticPopulation, x = "age", cond = "gender")

# compare generated household structure of original vs simulated data
tab <- spTable(syntheticPopulation, select = c("gender", "state", "hsize"))
spMosaic(tab, labeling = labeling_border(abbreviate = c(state = TRUE)))

# check state-netIncome of original vs simulated data
spBwplot(
  syntheticPopulation, x = "netIncome", cond = "economic_status"
)
```
